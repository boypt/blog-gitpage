<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无证程序员的PT桑</title>
  
  <subtitle>删库跑路中 ╮(╯▽╰)╭</subtitle>
  <link href="https://boypt.github.io/atom.xml" rel="self"/>
  
  <link href="https://boypt.github.io/"/>
  <updated>2021-09-01T08:04:21.118Z</updated>
  <id>https://boypt.github.io/</id>
  
  <author>
    <name>PTさん</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在路由器iptables中匹配IPv6动态地址</title>
    <link href="https://boypt.github.io/2018/10/24/match-ipv6/"/>
    <id>https://boypt.github.io/2018/10/24/match-ipv6/</id>
    <published>2018-10-24T07:59:18.000Z</published>
    <updated>2021-09-01T08:04:21.118Z</updated>
    
    <content type="html"><![CDATA[<p>家用宽带目前很多都部署了IPv6，家用路由器目前Padavan/Openwrt等系统都能较好地支持了IPv6。不过要充分利用IPv6链接设备，有些坑。</p><h3 id="动态变化的IPv6地址"><a href="#动态变化的IPv6地址" class="headerlink" title="动态变化的IPv6地址"></a>动态变化的IPv6地址</h3><p>首先是IPv6地址，不同设备（操作系统）获取的IPv6地址有区别，较为通用的是【无状态EUI-64地址】，操作系统通过网卡的mac地址生成一个64位固定后缀，以及路由器下发的64位前缀，合成一个固定的IPv6地址。</p><p>作为服务端，【无状态EUI-64地址】是较为适合的，Linux发行版很多组件（systemd-netword，dhcpcd等）默认都采用EUI-64地址。 </p><p>另外还有通过DHCPv6下发的地址，可以通过设置静态分发，对应设备（DUID）下发特定地址。作为服务器地址最适合的方式。</p><p>此外，家用宽带ISP提供的IPv6前缀是不定期变化的。可见要访问家庭宽带内网的设备，光是地址就存在了蛮多的变化因素。</p><h3 id="IPv6的【隐私扩展地址】"><a href="#IPv6的【隐私扩展地址】" class="headerlink" title="IPv6的【隐私扩展地址】"></a>IPv6的【隐私扩展地址】</h3><p>终端设备，比如手机、工作站版本Windows等设备，则使用【隐私扩展】的方式随机生成64位后缀，这样终端的地址每次链接时候都会随机改变，访问外部资源时候可避免被追踪。 如果要连接Windows远程桌面，安装的是工作站版本，系统默认已经启用【隐私扩展】，主机地址就是随机变化的，想要连接3389就很麻烦了，不过这个特性可以关闭。服务器版本的Windows默认不启用隐私扩展，而家庭版Windows不支持远程桌面[doge]。 管理员权限的CMD下执行 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6 set global randomizeidentifiers=disabled store=active </span><br><span class="line">netsh interface ipv6 set global randomizeidentifiers=disabled store=persistent </span><br><span class="line">netsh interface ipv6 set privacy state=disabled store=active </span><br><span class="line">netsh interface ipv6 set privacy state=disabled store=persistent</span><br></pre></td></tr></table></figure><h3 id="IPv6防火墙ip6tables"><a href="#IPv6防火墙ip6tables" class="headerlink" title="IPv6防火墙ip6tables"></a>IPv6防火墙ip6tables</h3><p>要从外网通过IPv6访问家里路由器下的设备，最关键一点是路由器上的防火墙要允许这样的转发。 Padavan/Openwrt都是基于Linux - ip6tables的防火墙。</p><p>默认情况下，只允许了v6子网内的设备被ping，只允许特定类型的ICMPv6报文通过转发，其他通信报文一律丢弃了。所以虽然IPv6下每个设备都有公网地址，但是还不至于不安全到每个设备都可让人随便连。</p><h3 id="动态匹配EUI-64后缀"><a href="#动态匹配EUI-64后缀" class="headerlink" title="动态匹配EUI-64后缀"></a>动态匹配EUI-64后缀</h3><p>考虑到前缀变化因素，要访问特定设备，就是让IPTABLES匹配特定设备的EUI-64后缀放通这个地址： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip6tables -I FORWARD -d ::abcd:1234:5678:90ef/::ffff:ffff:ffff:ffff -j ACCEPT</span><br></pre></td></tr></table></figure><p>可见iptables对v6地址的匹配<strong>掩码</strong>可以非常灵活，不像v4下只按前缀适配。坑的就是这个特征是没有文档的，目前文档中写的mask解释还是适配IPv4的内容，<a href="http://blog.dupondje.be/?p=17">有人专门发邮件去netfilter列表问了才知道</a>。IPv6地址中，双冒号::的写法代表是前/后均为0位，双冒号只能出现一次。</p><h3 id="动态匹配DHCPv6固定后缀"><a href="#动态匹配DHCPv6固定后缀" class="headerlink" title="动态匹配DHCPv6固定后缀"></a>动态匹配DHCPv6固定后缀</h3><p>对于内网服务器，可以设置DHCPv6进行固定网段后缀分配，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">240e:1234:5678:1234::1024:101</span><br><span class="line">240e:1234:5678:1234::1024:102</span><br><span class="line">240e:1234:5678:1234::1024:103</span><br><span class="line">240e:1234:5678:1234::1024:104</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在路由器上可以一个命令匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip6tables -I FORWARD -d ::1024:0000/::ffff:0000 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="Openwrt中配置转发规则"><a href="#Openwrt中配置转发规则" class="headerlink" title="Openwrt中配置转发规则"></a>Openwrt中配置转发规则</h3><p><img src="/2018/10/24/match-ipv6/openwrt-ip6tables.png"></p><h3 id="Padavan中设置转发规则"><a href="#Padavan中设置转发规则" class="headerlink" title="Padavan中设置转发规则"></a>Padavan中设置转发规则</h3><p>其实padavan中的防火墙功能并没有配置地址匹配转发规则的功能界面，只能在自定义脚本中写原始的iptables命令。截图中使用的padavan是增加了QOS组件的老毛子版本。   </p><p><img src="/2018/10/24/match-ipv6/padavan-ip6tables.png" alt="padavan-ip6tables"><br>以上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;家用宽带目前很多都部署了IPv6，家用路由器目前Padavan/Openwrt等系统都能较好地支持了IPv6。不过要充分利用IPv6链接设备，有些坑。&lt;/p&gt;
&lt;h3 id=&quot;动态变化的IPv6地址&quot;&gt;&lt;a href=&quot;#动态变化的IPv6地址&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Networking" scheme="https://boypt.github.io/categories/Networking/"/>
    
    
    <category term="address" scheme="https://boypt.github.io/tags/address/"/>
    
    <category term="iptables" scheme="https://boypt.github.io/tags/iptables/"/>
    
    <category term="ipv6" scheme="https://boypt.github.io/tags/ipv6/"/>
    
    <category term="suffix" scheme="https://boypt.github.io/tags/suffix/"/>
    
  </entry>
  
</feed>

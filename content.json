{"meta":{"title":"无证程序员的PT桑","subtitle":"删库跑路中 ╮(╯▽╰)╭","description":"","author":"PTさん","url":"https://boypt.github.io","root":"/"},"pages":[{"title":"About","date":"2021-09-07T09:35:14.006Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"about/index.html","permalink":"https://boypt.github.io/about/index.html","excerpt":"","text":""},{"title":"Project","date":"2021-09-07T09:35:14.006Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"project/index.html","permalink":"https://boypt.github.io/project/index.html","excerpt":"","text":""},{"title":"Series","date":"2021-09-07T09:35:14.006Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"series/index.html","permalink":"https://boypt.github.io/series/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-09-07T09:35:14.006Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"tags/index.html","permalink":"https://boypt.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"无线网卡AR5B22的5G频段","slug":"ar5b22","date":"2021-09-07T06:30:04.000Z","updated":"2021-09-07T09:35:14.002Z","comments":true,"path":"2021/09/07/ar5b22/","link":"","permalink":"https://boypt.github.io/2021/09/07/ar5b22/","excerpt":"AR5B22的无线芯片是AR9462。AR5B22在win7时代算是个挺热门的“神卡”，因为能用Killer的驱动颇有名气。但是作为早已停产的芯片和产品，这网卡在Win10下已经有点跟不上。","text":"AR5B22的无线芯片是AR9462。AR5B22在win7时代算是个挺热门的“神卡”，因为能用Killer的驱动颇有名气。但是作为早已停产的芯片和产品，这网卡在Win10下已经有点跟不上。 主要体现在Wifi 5G频段上，因为当时中国的5G频段还是只有149~161频，所以这个网卡也只能搜到这几个频段的。倒不是他连不上，完全是因为老旧的驱动代码限制了。 多次摸索后，需要手动选择另外的驱动，才能解除。 安装高通驱动首先下载安装高通的驱动大补包 ath-drivers.eu Qualcomm Atheros wireless driver 10.0.3.456 for AR9462 and Windows 10 安装后手动更改设备的驱动，手动选择11a|b|g|n Wireless Lan Mini-PCI Express Adapter，系统提示不兼容也要强上。 如图所示，实测这两个型号驱动都能使用。","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://boypt.github.io/tags/wifi/"},{"name":"wireless","slug":"wireless","permalink":"https://boypt.github.io/tags/wireless/"},{"name":"ar5b22","slug":"ar5b22","permalink":"https://boypt.github.io/tags/ar5b22/"}]},{"title":"大麦DW33D刷机总结帖","slug":"dw33d","date":"2021-09-07T05:44:04.000Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"2021/09/07/dw33d/","link":"","permalink":"https://boypt.github.io/2021/09/07/dw33d/","excerpt":"大麦DW33D已经是很多年前的路由，都2021了可能配置上的有点过时（1750MAC Wifi+全千兆+高通QCA9558），但是如果本着性价比出发的话，目前某鱼上不到50一台的性价比确实还行的。","text":"大麦DW33D已经是很多年前的路由，都2021了可能配置上的有点过时（1750MAC Wifi+全千兆+高通QCA9558），但是如果本着性价比出发的话，目前某鱼上不到50一台的性价比确实还行的。 总结一下刷机要点。 背景dw33d内部有三个存储空间（可理解为硬盘），SPI-NOR(16M)、 NAND(128M)、 TF卡（16G）。 原厂固件是在NOR上的，一些旧版（lede 17.x）也是设计刷到NOR上，这类固件称为(ath1x)。BREED默认也是刷到NOR，启动也是NOR。 后来openwrt把dw33d纳入官方支持时候，改成使用NAND作为固件区域，并称为ath79，或者nand固件。 旧版固件虽然刷入简单（可以Breed WEB页面直刷），但是可用空间非常有限。 nand固件的刷入较为复杂，但是有足够大的存储空间（可用空间70M+），可以安装很多可选插件。 Breed虽然在dw33d上工作不完美，但是还是比u-boot简化一丢丢。 刷机方法可以是u-boot，连接TTL线操作；也可以不拆外壳，telnet操作； 简洁刷机Breed刷Nand看起来很复杂，其实总共3个步骤： Breed设置环境变量 PC开启http服务器 Breed Telnet下载并写入固件。 设置环境变量目的是让breed默认从nand开始启动，bank 0是nand空间。 12345678envconf 0x6000000 0x20000env set network.ipaddr 192.168.1.1env set network.netmask 255.255.255.0env set autoboot.disabled 0env set autoboot.delay 5env set autoboot.command &quot;boot flash bank 0 0x0&quot;env save PC上开启HTTP服务器确保dw33d的地址能访问到pc, 例子中pc的地址是192.168.0.254 Breed 下载固件此处原理是，breed命令的wget下载指定地址的文件，放到地址0x80000000。然后需要注意提示下载的长度(0xd00000) 然后擦除对应长度的nand空间，然后从0x80000000复制写入特定长度的数据 12345wget http://192.168.0.254/firmware/dw33d-factory.bin##### 注意长度的0xd00000#####-&gt; Length: 13631488/0xd00000 (13MB) [application/octet-stream]flash bank 0 erase 0x0 0xd00000flash bank 0 write 0x0 0x80000000 0xd00000 关于升级测试过从21.02-rc升级到21.02正式版，直接web升级没出现问题。 但是软件包需要重装，常用工具curl/tcpdump之类。","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://boypt.github.io/tags/wifi/"},{"name":"rouer","slug":"rouer","permalink":"https://boypt.github.io/tags/rouer/"},{"name":"dw33d","slug":"dw33d","permalink":"https://boypt.github.io/tags/dw33d/"}]},{"title":"迅雷下载宝OPENWRT官方版本折腾SD卡扩容","slug":"thundercloud","date":"2021-09-07T05:32:54.000Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"2021/09/07/thundercloud/","link":"","permalink":"https://boypt.github.io/2021/09/07/thundercloud/","excerpt":"迅雷下载宝使用OPENWRT 21.02正式版","text":"迅雷下载宝使用OPENWRT 21.02正式版 Breed下直接刷入本来直接可用，没有太多需要折腾的。但是空间不大，而下载宝有个SD卡槽，可以折腾ExtRoot扩容。 官方文档 一些关键步骤替换源、安装必要内核模块 我把sd卡分区后格式化成f2fs了，官方里面推荐ext4 1234567sed -i &#x27;s|downloads.openwrt.org|mirrors.aliyun.com/openwrt|&#x27; /etc/opkg/distfeeds.confsed -i &#x27;s|downloads.openwrt.org|mirrors.tencent.com/openwrt|&#x27; /etc/opkg/distfeeds.confopkg updateopkg install block-mount kmod-fs-f2fs kmod-fs-ext4 kmod-usb-storage kmod-usb-ohci kmod-usb-uhci fdisk kmod-sdhci-mt7620 f2fs-tools f2fsck mkf2fs 以下才是关键步骤 1234567891011121314151617181920212223block info# 查到具体分区的uuid， 对应替换uci -q delete fstab.rwmuci set fstab.rwm=&quot;mount&quot;uci set fstab.rwm.device=&quot;/dev/mtdblock6&quot;uci set fstab.rwm.target=&quot;/rwm&quot;uci commit fstabuci -q delete fstab.overlayuci set fstab.overlay=&quot;mount&quot;uci set fstab.overlay.uuid=&quot;010624d4-e8a2-432c-8fde-b23cf18ebe20&quot;uci set fstab.overlay.target=&quot;/overlay&quot;uci commit fstab#迁移数据mkdir -p /tmp/cprootmount --bind /overlay /tmp/cprootmount /dev/mmcblk0p1 /mnttar -C /tmp/cproot -cvf - . | tar -C /mnt -xf - umount /tmp/cproot /mntreboot 关于升级升级后这些配置都没了，都得重新搞。sd卡的分区没必要格式化重来，但是以上步骤的数据迁移还是要做，升级后overlay的文件会有更新。内核/lib/modules对应版本的目录可以删除。 最重要一点，要删掉.extroot-uuid 1234mount /dev/sda1 /mntrm -f /mnt/.extroot-uuid /mnt/etc/.extroot-uuidumount /mnt 见官方文档的Troubleshooting block: extroot: UUID mismatch","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://boypt.github.io/tags/openwrt/"},{"name":"xunlei","slug":"xunlei","permalink":"https://boypt.github.io/tags/xunlei/"}]},{"title":"日本 au home spot cube 水晶盒子Wifi路由","slug":"auhome-spot-cube","date":"2021-09-07T02:34:27.000Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"2021/09/07/auhome-spot-cube/","link":"","permalink":"https://boypt.github.io/2021/09/07/auhome-spot-cube/","excerpt":"au home spot cube 是个挺低配的小路由，可能是最便宜的带5G频段（802.11n，aka WIFI 4）的设备。 没啥好折腾的，原版固件就很稳定，静静地当个带机量不大的小AP挺好的。","text":"au home spot cube 是个挺低配的小路由，可能是最便宜的带5G频段（802.11n，aka WIFI 4）的设备。 没啥好折腾的，原版固件就很稳定，静静地当个带机量不大的小AP挺好的。 原厂固件5G加入中国频段方法 用户名root 密码plumeria0077 打开192.168.0.1/syscmd.asp 输入命令： 12flash sethw HW_WLAN1_REG_DOMAIN 2flash sethw HW_WLAN0_REG_DOMAIN 2 重启后进入设置，打开SSID3设置页面(确保5G必须打开)，接着进入192.168.0.1/wlbasic.asp选频段，默认是自动，可以设置149和153两个国内信道。再次重启就可以了。 原文地址 1、关闭WPS2.4Ghz 1flash set WLAN0_WSC_DISABLE 1 5Ghz 1flash set WLAN1_WSC_DISABLE 1 害怕被PIN可以看一下这些文字：If the wrong PIN code three times, You will not be able to connect more. Please press the button below to release it.UnLock我也曾mdk3攻击路由器，使它重启，但是攻击5分钟无效。 ==== 2、使用中国5Ghz频道 ==== 1flash set WLAN0_CHANNEL 149 ==== 3、更改时区为东八区 ==== 1flash set NTP_TIMEZONE -8\\ 1 ==== 4、更改LAN IP地址 ==== 1234flash set IP_ADDR 192.168.0.1flash set SUBNET_MASK 255.255.255.0flash set DHCP_CLIENT_START 192.168.0.100flash set DHCP_CLIENT_END 192.168.0.200 ==== 5、更改用户名密码 ==== 1234flash set SUPER_NAME rootflash set SUPER_PASSWORD plumeria0077flash set USER_NAME auflash set USER_PASSWORD 1234 ==== 6、修改PIN码 ( 此项修改之后是初始化无法复原的 ) ==== 2.4Ghz 1flash sethw HW_WLAN0_WSC_PIN xxxxxxxx 5Ghz 1flash sethw HW_WLAN1_WSC_PIN xxxxxxxx ===== sdk固件要刷回原版，可以参考【N500R_TTL+TFTP写入教程】， ===== 注意： 加电时RESET， 然后192.168.1.6 就可以了，电脑地址要设为192.168.1.x。 tftp上传的原版固件威编程器固件，大小是8M的。8192kB3. 刷机命令 FLW 0 80500000 800000 注意一定是大写的。4. 启动后，登陆时账号是root，密码plumeria0077，你们的可以试试哈。 关于5G 149信道设置：虽然设置为149，但在【本机状态】5G信道是36，解决方法： 打开【系统维护】【系统命令行】或者192.168.0.1/syscmd.asp输入命令： 12flash sethw HW_WLAN1_REG_DOMAIN 2flash sethw HW_WLAN0_REG_DOMAIN 2 重启后进入设置，打开SSID3设置页面(确保5G必须打开)，接着进入【无线设置】或192.168.0.1/wlbasic.asp选频段，默认是自动，可以设置149和153两个国内信道。新版的信道可以输入。再次重启就可以了。可以在【本机状态】查看5G是否是149信道。 恢复Ccalibration Power赶紧查了一下，找到了[Embedded System] 手動設定 Ccalibration Power 搞定。 怎么样修改Ccalibration Power呢，举个栗子，说一下。1、 1HW_WLAN0_TX_POWER_CCK_A=3333333131313131313131313131 33是16进制转换10进制为51，31转换为49。 命令是： 1flash set HW_WLAN0_TX_POWER_CCK_A 51 51 51 49 49 49 49 49 49 49 49 49 49 49 2、复杂一点的： 1HW_WLAN0_TX_POWER_5G_HT40_1S_A=00000000000000000000000000000000000000000000000000000000000000000000002f2f2f2f2f2f2f2f2f2f2d2d2d2d2d2d2d2d2d2d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2c2c2c2c2c2c2d2d2d2d2d2d000000000000000000000000000000000000000000000000000000000000 你自己转换分组的，我累了。（末尾的00舍弃） 1flash sethw HW_WLAN0_TX_POWER_5G_HT40_1S_B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 47 47 47 47 47 47 47 47 47 47 45 45 45 45 45 45 45 45 45 45 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 44 44 44 44 44 44 45 45 45 45 45 45","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://boypt.github.io/tags/wifi/"},{"name":"router","slug":"router","permalink":"https://boypt.github.io/tags/router/"},{"name":"‎PXH11RWA","slug":"‎PXH11RWA","permalink":"https://boypt.github.io/tags/%E2%80%8EPXH11RWA/"}]},{"title":"移动光猫烽火HG6821M密码","slug":"HG6821M","date":"2021-09-07T02:30:37.000Z","updated":"2021-09-07T09:35:14.002Z","comments":true,"path":"2021/09/07/HG6821M/","link":"","permalink":"https://boypt.github.io/2021/09/07/HG6821M/","excerpt":"移动光猫烽火HG6821M密码","text":"移动光猫烽火HG6821M密码 超级用户 用户名：CMCCAdmin 密码：aDm8H%MdA 工厂模式 用户名：fiberhomehg2x0 密码：hg2x0 telnet 用户名：root 密码：hg2x0","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"modem","slug":"modem","permalink":"https://boypt.github.io/tags/modem/"},{"name":"光猫","slug":"光猫","permalink":"https://boypt.github.io/tags/%E5%85%89%E7%8C%AB/"},{"name":"HG6821M","slug":"HG6821M","permalink":"https://boypt.github.io/tags/HG6821M/"}]},{"title":"在路由器iptables中匹配IPv6动态地址","slug":"match-ipv6","date":"2018-10-24T07:59:18.000Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"2018/10/24/match-ipv6/","link":"","permalink":"https://boypt.github.io/2018/10/24/match-ipv6/","excerpt":"家用宽带目前很多都部署了IPv6，家用路由器目前Padavan/Openwrt等系统都能较好地支持了IPv6。不过要充分利用IPv6链接设备，有些坑。","text":"家用宽带目前很多都部署了IPv6，家用路由器目前Padavan/Openwrt等系统都能较好地支持了IPv6。不过要充分利用IPv6链接设备，有些坑。 动态变化的IPv6地址首先是IPv6地址，不同设备（操作系统）获取的IPv6地址有区别，较为通用的是【无状态EUI-64地址】，操作系统通过网卡的mac地址生成一个64位固定后缀，以及路由器下发的64位前缀，合成一个固定的IPv6地址。 作为服务端，【无状态EUI-64地址】是较为适合的，Linux发行版很多组件（systemd-netword，dhcpcd等）默认都采用EUI-64地址。 另外还有通过DHCPv6下发的地址，可以通过设置静态分发，对应设备（DUID）下发特定地址。作为服务器地址最适合的方式。 此外，家用宽带ISP提供的IPv6前缀是不定期变化的。可见要访问家庭宽带内网的设备，光是地址就存在了蛮多的变化因素。 IPv6的【隐私扩展地址】终端设备，比如手机、工作站版本Windows等设备，则使用【隐私扩展】的方式随机生成64位后缀，这样终端的地址每次链接时候都会随机改变，访问外部资源时候可避免被追踪。 如果要连接Windows远程桌面，安装的是工作站版本，系统默认已经启用【隐私扩展】，主机地址就是随机变化的，想要连接3389就很麻烦了，不过这个特性可以关闭。服务器版本的Windows默认不启用隐私扩展，而家庭版Windows不支持远程桌面[doge]。 管理员权限的CMD下执行 1234netsh interface ipv6 set global randomizeidentifiers=disabled store=active netsh interface ipv6 set global randomizeidentifiers=disabled store=persistent netsh interface ipv6 set privacy state=disabled store=active netsh interface ipv6 set privacy state=disabled store=persistent IPv6防火墙ip6tables要从外网通过IPv6访问家里路由器下的设备，最关键一点是路由器上的防火墙要允许这样的转发。 Padavan/Openwrt都是基于Linux - ip6tables的防火墙。 默认情况下，只允许了v6子网内的设备被ping，只允许特定类型的ICMPv6报文通过转发，其他通信报文一律丢弃了。所以虽然IPv6下每个设备都有公网地址，但是还不至于不安全到每个设备都可让人随便连。 动态匹配EUI-64后缀考虑到前缀变化因素，要访问特定设备，就是让IPTABLES匹配特定设备的EUI-64后缀放通这个地址： 1ip6tables -I FORWARD -d ::abcd:1234:5678:90ef/::ffff:ffff:ffff:ffff -j ACCEPT 可见iptables对v6地址的匹配掩码可以非常灵活，不像v4下只按前缀适配。坑的就是这个特征是没有文档的，目前文档中写的mask解释还是适配IPv4的内容，有人专门发邮件去netfilter列表问了才知道。IPv6地址中，双冒号::的写法代表是前/后均为0位，双冒号只能出现一次。 动态匹配DHCPv6固定后缀对于内网服务器，可以设置DHCPv6进行固定网段后缀分配，比如 12345240e:1234:5678:1234::1024:101240e:1234:5678:1234::1024:102240e:1234:5678:1234::1024:103240e:1234:5678:1234::1024:104... 在路由器上可以一个命令匹配 1ip6tables -I FORWARD -d ::1024:0000/::ffff:0000 -j ACCEPT Openwrt中配置转发规则 Padavan中设置转发规则其实padavan中的防火墙功能并没有配置地址匹配转发规则的功能界面，只能在自定义脚本中写原始的iptables命令。截图中使用的padavan是增加了QOS组件的老毛子版本。 以上。","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://boypt.github.io/tags/iptables/"},{"name":"address","slug":"address","permalink":"https://boypt.github.io/tags/address/"},{"name":"ipv6","slug":"ipv6","permalink":"https://boypt.github.io/tags/ipv6/"},{"name":"suffix","slug":"suffix","permalink":"https://boypt.github.io/tags/suffix/"}]},{"title":"iptables笔记","slug":"iptables","date":"2018-09-07T02:39:44.000Z","updated":"2021-09-07T09:35:14.006Z","comments":true,"path":"2018/09/07/iptables/","link":"","permalink":"https://boypt.github.io/2018/09/07/iptables/","excerpt":"iptables笔记","text":"iptables笔记 Packet Flow Chart Netfilter Flow Chart Firewall Rules12apt install iptables-persistent NAT as port forwarding1234567891011# 数据包进入PREROUTING Chain，DNAT修改来源数据包的目的地址/端口为映射的$DEST_IP:$PORTiptables -t nat -A PREROUTING -p tcp --dst $WAN_IP --dport 80 -j DNAT --to-destination $DEST_IP:$PORT# 此时Packet的目的地址不是本机地址，而是$DEST_IP，进入filter表的FORWARD Chain进行规则审核，要允许其通过（若filter表已是默认允许的，可以忽略本条）iptables -A FORWARD -p tcp --dst $DEST_IP --dport $PORT -j ACCEPT# 进入POSTROUTING Chain，SNAT修改数据包中的来源地址为本网关；若目的机的默认网关就是本机，可以忽略本步（因为如果是目的机的默认网关，不管发往哪里的包都是发回来本网关；不然的话会发去了另外一个网关，无法成为相同一个NAT会话，无法通信）。默认网关的方式不用这句时目标机可以看到来源的真实地址。iptables -t nat -A POSTROUTING -p tcp --dst $DEST_IP --dport 80 -j SNAT --to-source $LAN_IP# 在网关本机和内网其他机器访问WAN_IP这个端口映射，数据包产生在OUTPUT Chain，需要做和PREROUTING相同的操作才能访问到（若不需要，可忽略本步）iptables -t nat -A POSTROUTING --dst $WAN_IP -p tcp --dport 80 -j DNAT --to-destination $DEST_IP:$PORT NAT as gatewayEnable IP Forwarding 12sed -i &#x27;s/.*net\\.ipv4\\.ip_forward.*/net.ipv4.ip_forward = 1/&#x27; /etc/sysctl.confsysctl -p MASQUERADE, pppoe等动态IP环境使用环境 1iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -j MASQUERADE or SNAT, 静态外网IP, 或出口网卡绑定了多个IP时候使用 1iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -j SNAT --to-source &lt;IP&gt; 自动调整经pppoe-wan接口发出的TCP数据MSS, PPP链路情况 1iptables -t mangle -I POSTROUTING -o pppoe-wan -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu NAT as proxy （双向NAT，举例推特API服务器hosts转发）123456iptables -t nat -A PREROUTING -d [YOUR SERVER IP] -p tcp -m tcp --dport 443 -j DNAT --to-destination 199.59.148.20:443 iptables -t nat -A POSTROUTING -d 199.59.148.20 -p tcp -m tcp --dport 443 -j SNAT --to-source [YOUR SERVER IP]iptables -A FORWARD -d 199.59.148.20 -p tcp -m tcp --dport 443 -j ACCEPT iptables -A FORWARD -s 199.59.148.20 -p tcp -m tcp --sport 443 -m state --state RELATED,ESTABLISHED -j ACCEPT Iptables Firewall 后 FTP 服务 List 命令超时12modprobe ip_conntrack_ftpecho &quot;ip_conntrack_ftp&quot; &gt;&gt;/etc/modules Filter DNS from GFW12iptables -A INPUT --source 8.8.8.8,8.8.4.4 -p udp --source-port 53 -m dscp ! --dscp 0x00 -j DROPiptables -A INPUT --source 8.8.8.8,8.8.4.4 -p udp --source-port 53 -m ttl --ttl-gt 48 -j DROP Quick fix for deprecated state module [since Dec 2012]1sed -i &quot;s/-m state --state/-m conntrack --ctstate/g&quot; /etc/iptables/iptables.rules","categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://boypt.github.io/tags/iptables/"},{"name":"linux","slug":"linux","permalink":"https://boypt.github.io/tags/linux/"}]}],"categories":[{"name":"Networking","slug":"Networking","permalink":"https://boypt.github.io/categories/Networking/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://boypt.github.io/tags/wifi/"},{"name":"wireless","slug":"wireless","permalink":"https://boypt.github.io/tags/wireless/"},{"name":"ar5b22","slug":"ar5b22","permalink":"https://boypt.github.io/tags/ar5b22/"},{"name":"rouer","slug":"rouer","permalink":"https://boypt.github.io/tags/rouer/"},{"name":"dw33d","slug":"dw33d","permalink":"https://boypt.github.io/tags/dw33d/"},{"name":"openwrt","slug":"openwrt","permalink":"https://boypt.github.io/tags/openwrt/"},{"name":"xunlei","slug":"xunlei","permalink":"https://boypt.github.io/tags/xunlei/"},{"name":"router","slug":"router","permalink":"https://boypt.github.io/tags/router/"},{"name":"‎PXH11RWA","slug":"‎PXH11RWA","permalink":"https://boypt.github.io/tags/%E2%80%8EPXH11RWA/"},{"name":"modem","slug":"modem","permalink":"https://boypt.github.io/tags/modem/"},{"name":"光猫","slug":"光猫","permalink":"https://boypt.github.io/tags/%E5%85%89%E7%8C%AB/"},{"name":"HG6821M","slug":"HG6821M","permalink":"https://boypt.github.io/tags/HG6821M/"},{"name":"iptables","slug":"iptables","permalink":"https://boypt.github.io/tags/iptables/"},{"name":"address","slug":"address","permalink":"https://boypt.github.io/tags/address/"},{"name":"ipv6","slug":"ipv6","permalink":"https://boypt.github.io/tags/ipv6/"},{"name":"suffix","slug":"suffix","permalink":"https://boypt.github.io/tags/suffix/"},{"name":"linux","slug":"linux","permalink":"https://boypt.github.io/tags/linux/"}]}